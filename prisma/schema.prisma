// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Next Auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  cart Cart[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Models
model Product {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  unique_id String @default("miss")
  unique_id_1c String @default("miss")
  title       String
  price       Int
  discount Int @default(0)
  quantity Int @default(0)
  barcode String? @default("miss")
  artycul String? @default("miss")
  rating      String? @default("4")
  img String @default("miss")
  availability String
  description String @default("miss")
  breadcrumbs String @default("miss")
  categoryId String? @default("miss")
  country String? @default("miss")
  brand String? @default("miss")
  info Json[]
  reviews     Review[]
  cartProducts CartProduct[]
  orderProducts OrderProduct[]
  updatedAt DateTime? @updatedAt
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String
  parentId String?
  title String
}

model Cart {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @db.ObjectId
  cartProducts CartProduct[]
  totalProductsCount Int?
  totalPrice Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartProduct {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String   @db.ObjectId
  quantity   Int      @default(1)
  totalPrice Int  @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  rating    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String?
  phone String
  firstName String
  lastName String
  city String
  warehouse String
  totalPrice Int?
  orderProducts OrderProduct[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model OrderProduct {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String   @db.ObjectId
  quantity Int?
  itemTotal Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

